# Последний тип данных, который мы изучим в первом семестре: массив

# Массив (или ещё его называют "список") - набор каких-то значений.
# Выглядит вот так:
numbers = [43, 5436, 34, 65, 866]
# Как и всё остальное, хранить можно в переменной
# Чтобы создать массив, пишем символы [ и ].
# Между ними через запятую перечисляем элементы массива (значения, которые в нём хранятся)

# У каждого значения есть индекс - его порядковый номер
# [43, 5436, 34, 65, 866]
#  0     1    2   3   4

# !ВАЖНО!
# Нумерация (она же индексация) массивов начинается с нуля
# Эту вещь нужно принять и запомнить, так у вас будет во всех (почти) языках программирования :)

# Окей, мы разобрались, что в массиве хранятся какие-то элементы и у каждого свой номер.
# А как с этим работать?
# Вот таким способом можно "обратиться" к элементу массива.
print(numbers[2]) # Пишем название массива, ставим квадратные скобки и внутри указываем номер элемента, который хотим получить.

# Можно этот элемент сохранить в переменную
element = numbers[3]

# Можно элементы массива складывать
summa = numbers[0] + numbers[1] + numbers[2] + numbers[3] + numbers[4]
# Теперь в переменной summa у нас лежит сумма всех элементов массива

# Скорее всего у вас уже возник вопрос: "А зачем нам вообще массивы?"
# Массивы очень удобны, если у нас есть много однотипных значений, которые нужно обрабатывать в цикле

# Давайте посчитаем сумму элементов массива с помощью цикла
summa2 = 0
for i in range(0, 5):
    summa2 = summa2 + numbers[i]
print(summa2)
# Пока выглядит не очень понятно, да?
# Давайте разбираться.
# Завели переменную, где будет храниться результат
# Завели цикл
# На каждой итерации к текущему значению суммы добавляем новый элемент массива
# После завершения цикла выводим результат
# Возможно, способ "сложить числа вручную" сейчас кажется проще.
# Но представьте массив из 100 элементов. Как долго будете писать такое сложение вручную?
# А ведь способ подсчёта через цикл подойдёт для любого массива :)

# Далее, как узнать длину массива?
# Есть специальная функция: len()
length = len(numbers)
# Мы вызываем эту функцию, а в качестве аргумента передаём переменную с массивом
# В переменной length теперь лежит длина массива (в нашем случае 5)

# Код для подсчёта суммы всех элементов массива можно изменить вот так:
s = 0
for i in range(0, len(numbers)):
    s = s + numbers[i]
# Теперь точно не ошибёмся с промежутком :)


# Массив может содержть не только числа. Пример:
colors = ['red', 'blue', 'pink']
# Давайте выведем в консоль все эелементы массива colors
for i in range(len(colors)):
    print(colors[i])

# Вообще, массив может в себе содержать элементы разных типов
bad_array = [423, 'grfds', 'trfd', 643.453]
# Но давайте договоримся не делать такие массивы без необходимости.
# Массив сам по логике предполагает, что с его элементами будут работать ОДИНАКОВО
# А как мы знаем из прошлого урока об арифетических операторах, это не всегда возможно с разными типами данных