# Теперь настало время изучить новый тип данных
# Давайте заодно вспомним, сколько мы их вообще знаем
# 45 - int (целое число)
# 65.84 - float (дробное число)
# 'kwebfke' - string (строка)

# Сейчас мы добавим к ним ещё один тип
# Он называется boolean (булин) - логический тип данных
# Переменные типа boolean могут принимать только два значения:
# True (истина). Читается как "тру"
# False (ложь). Читается как "фолс"

# Так вот, этот тип ВСЕГДА появляется, когда мы что-то пытаемся сравнивать
# Пример:
x = 5 > 10
# Мы создали переменную x, в которой теперь лежит РЕЗУЛЬТАТ сравнения чисел 5 и 10
# Раньше мы говорили, что результатом сравнения будет ответ: "Да" или "Нет"
# Теперь мы будем говорить грамотнее: True или False
# В данном случае в переменной x лежит значение False, т.к. 5 не больше 10 и ответ на сравнение "Нет"
print('В переменной х лежит значение:', x) # Если вы запустите этот код, увидите содержимое переменной x


# Посмотрим, как это работает с условным оператором
y = 10 # Заведём переменную y в которой будет лежать число 10

if y < 100:
    print('Число ', y,' меньше 100')
else:
    print('Число ', y,' больше 100')

# В данном случае сначала подсчитается результат сравнения
# Т.к. в переменную y мы записали число 10, результатом будет True
# 10 < 100 - это правда

# После того, как результат вычислен, программа САМА во время выполнения подставляет его вместо условия
# По сути получаем что-то такое
# if True:
#     print('Число ', y,' меньше 100')
# else:
#     print('Число ', y,' больше 100')
    
# Если после if подставится True, то будут выполнены команды, которые идут сразу после if,
# а те, которые идут после else, проигнорируются

# И наоборот, если у нас будет ситуация if False: , то проигнорируются команды для if, а программа перейдёт в блок else.

# Попробуйте скопировать код и поменять значение y так, чтобы результатом выражения y < 100 было False.