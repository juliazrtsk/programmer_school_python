# Теперь давайте вспомним, что такое "тип данных"
# В переменных могут лежать разные значения. У каждого значения есть свой тип

turtle_angle = 90 # тип значения - число
turtle_step = 57.3  # числа могут быть дробными

address = "ул. 30-я Рабочая, 14А" # тип значения - строка. Набор различных символов (цифры, буквы, знаки и т.д.)
turtle_color = 'red' # строки могут записываться в разных кавычках. Python это позволяет


import turtle
t = turtle.Turtle()

# Как мы используем переменные
# Вы уже видели, как работают команды для черепашки: вы пишите им какие-то строки и числа в скобках
# Теперь вместо того, чтобы писать t.forward(57.3) мы будем заводить переменную и писать:
t.forward(turtle_step)
# Тоже самое с углами:
t.left(turtle_angle)
# И с цветами
t.color(turtle_color)
t.forward(turtle_step)

# Зачем это нужно? Вполне логичный вопрос
# У многих из вас программы уже вышли довольно длинными - больше 100 строк кода.
# Представьте ситуацию, когда вам захочется поменять угол, на который вы поворачиваете черепашку.
# Что будете делать, если не будете использовать переменные? Скорее всего, вручную станете менять каждую команду.
# Это будет очень нудно, долго. А ещё скорее всего приведёт к ошибкам - велика вероятность, что вы пропустите какое-нибудь место и будете ещё дольше его искать.
# Если вы будете использовать переменную, то достаточно будет поменять только одно место: то, где вы её создаёте.



# Теперь немного вернёмся к тому, как работает Python и тому, какие в нём есть правила.
# Ещё раз напомню, как выглядят команды, которые мы пишем черепашке
t.forward(50)
# t - это объект. Точнее, t - это переменная с названием "t" и значением "объект".
# Объект в программировании - это штука, у которой есть свойства и действия
# Пример из жизни: машина - объект.
# У неё есть свойства "марка", "цена", "цвет" и т.д.
# У неё есть действия: "ехать", "поворачивать".
# Если бы мы писали программу с использованием машины, то это выглядело бы примерно так:
# mashina = <....> - создали переменную с названием машина и каким-то (сейчас не важно каким) образом положили туда объект "машина"
# print(machina.color) - этой командой мы вывели на экран цвет машины
# mashina.ride() - этой командой мы заставили машину ехать. Слово ride с английского переводится как "ездить"

# На что здесь нужно обратить внимание:
# 1. Чтобы "обратиться" к свойству объекта-машины мы пишем название, ставим точку и пишем название свойства
# mashina.color - всё, больше ничего не нужно. Ни скобок, ни пробелов
# 2. А вот чтобы заставить машину двигаться и вызвать действие, мы пишем название, ставим точку, пишем название действия и обязательно ставим скобки
# mashina.ride() - с помощью скобок Python понимает, что должно произойти действие

# Вернёмся к черепашке
t.forward(50)
# В данном случае, черепашка - объект, .forward() - вызов действия "идти вперёд"
# Возникает вопрос: а что такое число в скобках?
# Дело в том, что некоторым действиям нужна дополнительная информация, чтобы они произошли.
# Если мы напишем просто t.forward(), то скажем черепашке "иди", но не скажем сколько шагов. Для неё это непонятно.
# Поэтому некоторым дейтсвиям мы эту дополнительную информацию сообщаем. Эта информация называется "аргументы"
# Число 50 в данном примере - это информация о количестве шагов.

# Последнее в этой теме: аргументы могут быть разных типов
# Например, команда forward() ждёт, что вы в скобках напишете именно число. Либо переменную, значение у которой - число
# Мы не можем написать t.forward('red')
# Помните об этом, когда используете переменные :)

