
# Многие задачи, связанные с циклами, можно решать двумя способами
# И циклом for, и циклом while

# Например, вот такую задачу
# Пользователь вводит число N. Программа должна вывести на экран числа от N до 1.
n = int(input())

# Сначала решим задачу при помощи for
for i in range (0, n):
    print(n - i)

# А теперь ту же задачу решим циклом while
while n >= 1:
    print(n)
    n = n - 1

# Решения разберите самостоятельно.


# Может возникнуть вопрос, а зачем в таком случае вообще нужен этот while?
# Выглядит сложнее, условие какое-то, строчек больше

# Дело в том, что программист не всегда может заранее знать, сколько будет итераций в цикле
# В случае с циклом for, это знать нужно: мы же указываем чёткий промежуток, в котором будет меняться счётчик цикла i.
# Если нам попадётся задача, в которой количество итераций определить нелья, на помощь придёт while.
# Нужно будет только придумать подходящее условие.

# Пример
# Вот эта задача: https://pythontutor.ru/lessons/while/problems/seq_len/
# В тестовых данных даются последовательности разной длины.
# Предсказать количество итераций нереально
# А вот условие там довольно простое
# Внутри цикла нужно считывать символ и наращивать переменную для длины последовательности.
# И делать это нужно ПОКА не встретится 0


# Итак, давайте запомним различия между for и while:
# 1. Циклу for нужно обязательно сообщить ТОЧНОЕ количество итераций
# А цикл while выполняется пока указанное ему условие = True

# 2. У цикла for есть счётчик цикла: переменная i. И эту переменную НЕЛЬЗЯ менять внутри цикла
# Она меняется сама, последовательно прибавляя к себе 1 в рамках промежутка, который мы указали.
# У цикла while нет счётчика цикла (т.е. нет переменной, которая показывала бы номер итерации).
# Однако у него есть условие, которое ВСЕГДА должно зависеть от значения какой-нибудь переменной
# И эту переменную внутри цикла нужно МЕНЯТЬ обязательно.
# Иначе цикл будет бесконечным.