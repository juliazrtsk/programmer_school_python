# До прошлого занятия мы
# То есть, код для рисования шестиугольника мы бы написали вот так
import turtle
t = turtle.Turtle()

step = 50
angle = 60

t.forward(step)
t.left(angle)
t.forward(step)
t.left(angle)
t.forward(step)
t.left(angle)
t.forward(step)
t.left(angle)
t.forward(step)
t.left(angle)
t.forward(step)
t.left(angle)


# А если таких шестиугольников нужно много? Сто штук?
# Придётся копировать этот и так не маленький кусок кода 100 раз.
# Программу станет неудобно читать и разбирать. Искать в ней ошибки станет почти невозможно.
# А если вдруг мы захотим изменить шестиугольники на пятиугольники? Можете посчитать, сколько вам нужно будет изменить строчек?

# Вместо того, чтобы писать какие-то новые интересные штуки, мы закопаемся в старом коде в попытках его изменить.
# Это никуда не годится.
# Поэтому мы теперь начинаем изучать способы наш код оптимизировать — сделать так, чтобы его было легче читать и изменять.

# Первое, что нам поможет в этом — циклы.
# Циклы — это оператор //нагуглить

# Ту команду, которую мы передадим циклу, он выполнит несколько раз. Число раз мы задаём сами. Пример
for i in range (1, 5):
    print('Люблю программировать')

# Скопируйте этот код в новый файлик и запустите его. Не импортируйте черепашку, не рисуте ничего.
# Для того, чтобы эти две строчки выше работали больше ничего не нужно :)


# Теперь давайте разберем детально
# for — служебное слово (помните что это?). Оно говорит компьютеру, что сейчас начнется цикл. Переводится с английского как "для"
# i — переменная, счётчик цикла (запомните). Имя у этой переменной может быть любым. Традиционно используют i
# in range — тоже служебные слова. Переводятся как "в промежутке от ... до ..."
# () — промежуток, в котором будут меняться значения переменной. На каждом шаге цикла переменная i будет принимать значение из этого промежутка.
# : - не забывайте в конце строчки ставить двоеточие
# Дальше идёт переход на новую строчку и обязательно отступ (клавиша Tab).
# Все команды, перед которыми вы поставите отступ, будут находиться "в теле" цикла. То есть, они выполнятся несколько раз.

for i in range (1, 3):
    print('Начался шаг цикла №', i)
    number = int(input('Введите число: '))
    print('Вы ввели число ', number)
    print('Один шаг цикла закончен')

print('Эта команда выполнится 1 раз, потому что она не входит в цикл. У неё нет отступа')

# Один шаг цикла называется "итерация". После каждой итерации счетчик цикла i меняет свое значение на 1.
# Например, если мы укажем промежуток (1, 4), то
# во время первой итерации: i = 1
# во время второй итерации: i = 2 
# во время третьей итерации: i = 3
# Почему мы указали промежуток от 1 до 4, но итераций будет всего 3?
# Второе число - это граница, которая НЕ входит в промежуток.
# Т.е. если вам нужно, чтобы код внутри цикла отработал 5 раз, нужно указать промежуток (1, 6)

# Давайте теперь попробуем нарисовать шестиугольник с помощью цикла
# В начале файла мы уже импортировали библиотеку и создали черепашку, поэтому сейчас я этого делать не буду
for i in range (1, 7):
    t.forward(step)
    t.left(angle)

# Чтобы увидеть, что произойдёт, скопируйте этот кусочек программы и запустите в новом файле.
# Решение, которое раньше занимало 12 строчек, теперь уместилось всего в 3 :)